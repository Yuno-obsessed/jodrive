/*
 * This file is generated by jOOQ.
 */
package sanity.nil.block.db.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.block.db.BlockDb;
import sanity.nil.block.db.Keys;
import sanity.nil.block.db.tables.records.TasksRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tasks extends TableImpl<TasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>block_db.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksRecord> getRecordType() {
        return TasksRecord.class;
    }

    /**
     * The column <code>block_db.tasks.id</code>.
     */
    public final TableField<TasksRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>block_db.tasks.retries</code>.
     */
    public final TableField<TasksRecord, Short> RETRIES = createField(DSL.name("retries"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>block_db.tasks.updated_at</code>.
     */
    public final TableField<TasksRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>block_db.tasks.action</code>.
     */
    public final TableField<TasksRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>block_db.tasks.object_id</code>.
     */
    public final TableField<TasksRecord, String> OBJECT_ID = createField(DSL.name("object_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>block_db.tasks.status</code>.
     */
    public final TableField<TasksRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>block_db.tasks.metadata</code>.
     */
    public final TableField<TasksRecord, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "");

    private Tasks(Name alias, Table<TasksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>block_db.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(DSL.name(alias), TASKS);
    }

    /**
     * Create an aliased <code>block_db.tasks</code> table reference
     */
    public Tasks(Name alias) {
        this(alias, TASKS);
    }

    /**
     * Create a <code>block_db.tasks</code> table reference
     */
    public Tasks() {
        this(DSL.name("tasks"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : BlockDb.BLOCK_DB;
    }

    @Override
    public Identity<TasksRecord, Integer> getIdentity() {
        return (Identity<TasksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TasksRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_690;
    }

    @Override
    public List<Check<TasksRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("CONSTRAINT_6"), "\"action\" = 'DELETE_BLOCKS'", true),
            Internal.createCheck(this, DSL.name("CONSTRAINT_69"), "\"status\" IN('CREATED', 'FINISHED', 'IN_RETRY', 'FAILED')", true)
        );
    }

    @Override
    public Tasks as(String alias) {
        return new Tasks(DSL.name(alias), this);
    }

    @Override
    public Tasks as(Name alias) {
        return new Tasks(alias, this);
    }

    @Override
    public Tasks as(Table<?> alias) {
        return new Tasks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Name name) {
        return new Tasks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Table<?> name) {
        return new Tasks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks where(Condition condition) {
        return new Tasks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tasks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tasks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tasks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tasks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tasks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
