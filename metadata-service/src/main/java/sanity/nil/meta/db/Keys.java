/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import sanity.nil.meta.db.tables.*;
import sanity.nil.meta.db.tables.records.*;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * metadata_db.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FileIdSequenceRecord> FILE_ID_SEQUENCE_PKEY = Internal.createUniqueKey(FileIdSequence.FILE_ID_SEQUENCE, DSL.name("file_id_sequence_pkey"), new TableField[] { FileIdSequence.FILE_ID_SEQUENCE.WS_ID }, true);
    public static final UniqueKey<FileJournalRecord> FILE_JOURNAL_PKEY = Internal.createUniqueKey(FileJournal.FILE_JOURNAL, DSL.name("file_journal_pkey"), new TableField[] { FileJournal.FILE_JOURNAL.WS_ID, FileJournal.FILE_JOURNAL.FILE_ID }, true);
    public static final UniqueKey<LinksRecord> LINKS_PKEY = Internal.createUniqueKey(Links.LINKS, DSL.name("links_pkey"), new TableField[] { Links.LINKS.LINK }, true);
    public static final UniqueKey<StatisticsRecord> STATISTICS_PKEY = Internal.createUniqueKey(Statistics.STATISTICS, DSL.name("statistics_pkey"), new TableField[] { Statistics.STATISTICS.ID }, true);
    public static final UniqueKey<TasksRecord> TASKS_PKEY = Internal.createUniqueKey(Tasks.TASKS, DSL.name("tasks_pkey"), new TableField[] { Tasks.TASKS.ID }, true);
    public static final UniqueKey<UserStatisticsRecord> USER_STATISTICS_PKEY = Internal.createUniqueKey(UserStatistics.USER_STATISTICS, DSL.name("user_statistics_pkey"), new TableField[] { UserStatistics.USER_STATISTICS.STATISTICS_ID, UserStatistics.USER_STATISTICS.USER_ID }, true);
    public static final UniqueKey<UserSubscriptionsRecord> USER_SUBSCRIPTIONS_PKEY = Internal.createUniqueKey(UserSubscriptions.USER_SUBSCRIPTIONS, DSL.name("user_subscriptions_pkey"), new TableField[] { UserSubscriptions.USER_SUBSCRIPTIONS.ID }, true);
    public static final UniqueKey<UserWorkspacesRecord> USER_WORKSPACES_PKEY = Internal.createUniqueKey(UserWorkspaces.USER_WORKSPACES, DSL.name("user_workspaces_pkey"), new TableField[] { UserWorkspaces.USER_WORKSPACES.USER_ID, UserWorkspaces.USER_WORKSPACES.WS_ID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<WorkspaceSubscriptionsRecord> WORKSPACE_SUBSCRIPTIONS_PKEY = Internal.createUniqueKey(WorkspaceSubscriptions.WORKSPACE_SUBSCRIPTIONS, DSL.name("workspace_subscriptions_pkey"), new TableField[] { WorkspaceSubscriptions.WORKSPACE_SUBSCRIPTIONS.ID }, true);
    public static final UniqueKey<WorkspacesRecord> WORKSPACES_PKEY = Internal.createUniqueKey(Workspaces.WORKSPACES, DSL.name("workspaces_pkey"), new TableField[] { Workspaces.WORKSPACES.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FileJournalRecord, UsersRecord> FILE_JOURNAL__FILE_JOURNAL_UPDATED_BY = Internal.createForeignKey(FileJournal.FILE_JOURNAL, DSL.name("file_journal_updated_by"), new TableField[] { FileJournal.FILE_JOURNAL.UPDATED_BY }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<FileJournalRecord, WorkspacesRecord> FILE_JOURNAL__FILE_JOURNAL_WS = Internal.createForeignKey(FileJournal.FILE_JOURNAL, DSL.name("file_journal_ws"), new TableField[] { FileJournal.FILE_JOURNAL.WS_ID }, Keys.WORKSPACES_PKEY, new TableField[] { Workspaces.WORKSPACES.ID }, true);
    public static final ForeignKey<FileJournalRecord, UsersRecord> FILE_JOURNAL__FILE_UPLOADER = Internal.createForeignKey(FileJournal.FILE_JOURNAL, DSL.name("file_uploader"), new TableField[] { FileJournal.FILE_JOURNAL.UPLOADER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<LinksRecord, UsersRecord> LINKS__LINK_ISSUER = Internal.createForeignKey(Links.LINKS, DSL.name("link_issuer"), new TableField[] { Links.LINKS.ISSUER }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<UserStatisticsRecord, StatisticsRecord> USER_STATISTICS__USER_STATISTICS_STATISTICS = Internal.createForeignKey(UserStatistics.USER_STATISTICS, DSL.name("user_statistics_statistics"), new TableField[] { UserStatistics.USER_STATISTICS.STATISTICS_ID }, Keys.STATISTICS_PKEY, new TableField[] { Statistics.STATISTICS.ID }, true);
    public static final ForeignKey<UserStatisticsRecord, UsersRecord> USER_STATISTICS__USER_STATISTICS_USER = Internal.createForeignKey(UserStatistics.USER_STATISTICS, DSL.name("user_statistics_user"), new TableField[] { UserStatistics.USER_STATISTICS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<UserWorkspacesRecord, UsersRecord> USER_WORKSPACES__USER_WS_USER = Internal.createForeignKey(UserWorkspaces.USER_WORKSPACES, DSL.name("user_ws_user"), new TableField[] { UserWorkspaces.USER_WORKSPACES.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<UserWorkspacesRecord, WorkspacesRecord> USER_WORKSPACES__USER_WS_WS = Internal.createForeignKey(UserWorkspaces.USER_WORKSPACES, DSL.name("user_ws_ws"), new TableField[] { UserWorkspaces.USER_WORKSPACES.WS_ID }, Keys.WORKSPACES_PKEY, new TableField[] { Workspaces.WORKSPACES.ID }, true);
    public static final ForeignKey<UsersRecord, UserSubscriptionsRecord> USERS__USER_SUBSCRIPTION = Internal.createForeignKey(Users.USERS, DSL.name("user_subscription"), new TableField[] { Users.USERS.SUBSCRIPTION_ID }, Keys.USER_SUBSCRIPTIONS_PKEY, new TableField[] { UserSubscriptions.USER_SUBSCRIPTIONS.ID }, true);
}
