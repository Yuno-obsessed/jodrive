/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.Users.UsersPath;
import sanity.nil.meta.db.tables.records.UserSubscriptionsRecord;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserSubscriptions extends TableImpl<UserSubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metadata_db.user_subscriptions</code>
     */
    public static final UserSubscriptions USER_SUBSCRIPTIONS = new UserSubscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSubscriptionsRecord> getRecordType() {
        return UserSubscriptionsRecord.class;
    }

    /**
     * The column <code>metadata_db.user_subscriptions.id</code>.
     */
    public final TableField<UserSubscriptionsRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>metadata_db.user_subscriptions.description</code>.
     */
    public final TableField<UserSubscriptionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>metadata_db.user_subscriptions.title</code>.
     */
    public final TableField<UserSubscriptionsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>metadata_db.user_subscriptions.storage_limit</code>.
     */
    public final TableField<UserSubscriptionsRecord, Long> STORAGE_LIMIT = createField(DSL.name("storage_limit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>metadata_db.user_subscriptions.workspaces_limit</code>.
     */
    public final TableField<UserSubscriptionsRecord, Integer> WORKSPACES_LIMIT = createField(DSL.name("workspaces_limit"), SQLDataType.INTEGER, this, "");

    private UserSubscriptions(Name alias, Table<UserSubscriptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserSubscriptions(Name alias, Table<UserSubscriptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.user_subscriptions</code> table
     * reference
     */
    public UserSubscriptions(String alias) {
        this(DSL.name(alias), USER_SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>metadata_db.user_subscriptions</code> table
     * reference
     */
    public UserSubscriptions(Name alias) {
        this(alias, USER_SUBSCRIPTIONS);
    }

    /**
     * Create a <code>metadata_db.user_subscriptions</code> table reference
     */
    public UserSubscriptions() {
        this(DSL.name("user_subscriptions"), null);
    }

    public <O extends Record> UserSubscriptions(Table<O> path, ForeignKey<O, UserSubscriptionsRecord> childPath, InverseForeignKey<O, UserSubscriptionsRecord> parentPath) {
        super(path, childPath, parentPath, USER_SUBSCRIPTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserSubscriptionsPath extends UserSubscriptions implements Path<UserSubscriptionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserSubscriptionsPath(Table<O> path, ForeignKey<O, UserSubscriptionsRecord> childPath, InverseForeignKey<O, UserSubscriptionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserSubscriptionsPath(Name alias, Table<UserSubscriptionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserSubscriptionsPath as(String alias) {
            return new UserSubscriptionsPath(DSL.name(alias), this);
        }

        @Override
        public UserSubscriptionsPath as(Name alias) {
            return new UserSubscriptionsPath(alias, this);
        }

        @Override
        public UserSubscriptionsPath as(Table<?> alias) {
            return new UserSubscriptionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public Identity<UserSubscriptionsRecord, Short> getIdentity() {
        return (Identity<UserSubscriptionsRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserSubscriptionsRecord> getPrimaryKey() {
        return Keys.USER_SUBSCRIPTIONS_PKEY;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit to-many join path to the <code>metadata_db.users</code>
     * table
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, null, Keys.USERS__USER_SUBSCRIPTION.getInverseKey());

        return _users;
    }

    @Override
    public UserSubscriptions as(String alias) {
        return new UserSubscriptions(DSL.name(alias), this);
    }

    @Override
    public UserSubscriptions as(Name alias) {
        return new UserSubscriptions(alias, this);
    }

    @Override
    public UserSubscriptions as(Table<?> alias) {
        return new UserSubscriptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSubscriptions rename(String name) {
        return new UserSubscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSubscriptions rename(Name name) {
        return new UserSubscriptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSubscriptions rename(Table<?> name) {
        return new UserSubscriptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions where(Condition condition) {
        return new UserSubscriptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSubscriptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSubscriptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSubscriptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSubscriptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
