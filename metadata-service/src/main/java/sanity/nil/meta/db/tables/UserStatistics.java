/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.Statistics.StatisticsPath;
import sanity.nil.meta.db.tables.Users.UsersPath;
import sanity.nil.meta.db.tables.records.UserStatisticsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserStatistics extends TableImpl<UserStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metadata_db.user_statistics</code>
     */
    public static final UserStatistics USER_STATISTICS = new UserStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserStatisticsRecord> getRecordType() {
        return UserStatisticsRecord.class;
    }

    /**
     * The column <code>metadata_db.user_statistics.statistics_id</code>.
     */
    public final TableField<UserStatisticsRecord, Short> STATISTICS_ID = createField(DSL.name("statistics_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>metadata_db.user_statistics.user_id</code>.
     */
    public final TableField<UserStatisticsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>metadata_db.user_statistics.value</code>.
     */
    public final TableField<UserStatisticsRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(255), this, "");

    private UserStatistics(Name alias, Table<UserStatisticsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserStatistics(Name alias, Table<UserStatisticsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.user_statistics</code> table
     * reference
     */
    public UserStatistics(String alias) {
        this(DSL.name(alias), USER_STATISTICS);
    }

    /**
     * Create an aliased <code>metadata_db.user_statistics</code> table
     * reference
     */
    public UserStatistics(Name alias) {
        this(alias, USER_STATISTICS);
    }

    /**
     * Create a <code>metadata_db.user_statistics</code> table reference
     */
    public UserStatistics() {
        this(DSL.name("user_statistics"), null);
    }

    public <O extends Record> UserStatistics(Table<O> path, ForeignKey<O, UserStatisticsRecord> childPath, InverseForeignKey<O, UserStatisticsRecord> parentPath) {
        super(path, childPath, parentPath, USER_STATISTICS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserStatisticsPath extends UserStatistics implements Path<UserStatisticsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserStatisticsPath(Table<O> path, ForeignKey<O, UserStatisticsRecord> childPath, InverseForeignKey<O, UserStatisticsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserStatisticsPath(Name alias, Table<UserStatisticsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserStatisticsPath as(String alias) {
            return new UserStatisticsPath(DSL.name(alias), this);
        }

        @Override
        public UserStatisticsPath as(Name alias) {
            return new UserStatisticsPath(alias, this);
        }

        @Override
        public UserStatisticsPath as(Table<?> alias) {
            return new UserStatisticsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public UniqueKey<UserStatisticsRecord> getPrimaryKey() {
        return Keys.USER_STATISTICS_PKEY;
    }

    @Override
    public List<ForeignKey<UserStatisticsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_STATISTICS__USER_STATISTICS_STATISTICS, Keys.USER_STATISTICS__USER_STATISTICS_USER);
    }

    private transient StatisticsPath _statistics;

    /**
     * Get the implicit join path to the <code>metadata_db.statistics</code>
     * table.
     */
    public StatisticsPath statistics() {
        if (_statistics == null)
            _statistics = new StatisticsPath(this, Keys.USER_STATISTICS__USER_STATISTICS_STATISTICS, null);

        return _statistics;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>metadata_db.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.USER_STATISTICS__USER_STATISTICS_USER, null);

        return _users;
    }

    @Override
    public UserStatistics as(String alias) {
        return new UserStatistics(DSL.name(alias), this);
    }

    @Override
    public UserStatistics as(Name alias) {
        return new UserStatistics(alias, this);
    }

    @Override
    public UserStatistics as(Table<?> alias) {
        return new UserStatistics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserStatistics rename(String name) {
        return new UserStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserStatistics rename(Name name) {
        return new UserStatistics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserStatistics rename(Table<?> name) {
        return new UserStatistics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserStatistics where(Condition condition) {
        return new UserStatistics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserStatistics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserStatistics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserStatistics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserStatistics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserStatistics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserStatistics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserStatistics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserStatistics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserStatistics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
