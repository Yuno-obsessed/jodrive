/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.Users.UsersPath;
import sanity.nil.meta.db.tables.records.LinksRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Links extends TableImpl<LinksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metadata_db.links</code>
     */
    public static final Links LINKS = new Links();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinksRecord> getRecordType() {
        return LinksRecord.class;
    }

    /**
     * The column <code>metadata_db.links.link</code>.
     */
    public final TableField<LinksRecord, String> LINK = createField(DSL.name("link"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>metadata_db.links.issuer</code>.
     */
    public final TableField<LinksRecord, UUID> ISSUER = createField(DSL.name("issuer"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>metadata_db.links.times_used</code>.
     */
    public final TableField<LinksRecord, Integer> TIMES_USED = createField(DSL.name("times_used"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>metadata_db.links.created_at</code>.
     */
    public final TableField<LinksRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>metadata_db.links.expires_at</code>.
     */
    public final TableField<LinksRecord, OffsetDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Links(Name alias, Table<LinksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Links(Name alias, Table<LinksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.links</code> table reference
     */
    public Links(String alias) {
        this(DSL.name(alias), LINKS);
    }

    /**
     * Create an aliased <code>metadata_db.links</code> table reference
     */
    public Links(Name alias) {
        this(alias, LINKS);
    }

    /**
     * Create a <code>metadata_db.links</code> table reference
     */
    public Links() {
        this(DSL.name("links"), null);
    }

    public <O extends Record> Links(Table<O> path, ForeignKey<O, LinksRecord> childPath, InverseForeignKey<O, LinksRecord> parentPath) {
        super(path, childPath, parentPath, LINKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LinksPath extends Links implements Path<LinksRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LinksPath(Table<O> path, ForeignKey<O, LinksRecord> childPath, InverseForeignKey<O, LinksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LinksPath(Name alias, Table<LinksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LinksPath as(String alias) {
            return new LinksPath(DSL.name(alias), this);
        }

        @Override
        public LinksPath as(Name alias) {
            return new LinksPath(alias, this);
        }

        @Override
        public LinksPath as(Table<?> alias) {
            return new LinksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public UniqueKey<LinksRecord> getPrimaryKey() {
        return Keys.LINKS_PKEY;
    }

    @Override
    public List<ForeignKey<LinksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LINKS__LINK_ISSUER);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>metadata_db.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.LINKS__LINK_ISSUER, null);

        return _users;
    }

    @Override
    public Links as(String alias) {
        return new Links(DSL.name(alias), this);
    }

    @Override
    public Links as(Name alias) {
        return new Links(alias, this);
    }

    @Override
    public Links as(Table<?> alias) {
        return new Links(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(String name) {
        return new Links(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(Name name) {
        return new Links(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(Table<?> name) {
        return new Links(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Links where(Condition condition) {
        return new Links(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Links where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Links where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Links where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Links where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Links where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Links where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Links where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Links whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Links whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
