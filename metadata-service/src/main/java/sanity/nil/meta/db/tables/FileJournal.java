/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.Users.UsersPath;
import sanity.nil.meta.db.tables.Workspaces.WorkspacesPath;
import sanity.nil.meta.db.tables.records.FileJournalRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FileJournal extends TableImpl<FileJournalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metadata_db.file_journal</code>
     */
    public static final FileJournal FILE_JOURNAL = new FileJournal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileJournalRecord> getRecordType() {
        return FileJournalRecord.class;
    }

    /**
     * The column <code>metadata_db.file_journal.ws_id</code>.
     */
    public final TableField<FileJournalRecord, Long> WS_ID = createField(DSL.name("ws_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>metadata_db.file_journal.file_id</code>.
     */
    public final TableField<FileJournalRecord, Long> FILE_ID = createField(DSL.name("file_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>metadata_db.file_journal.latest</code>.
     */
    public final TableField<FileJournalRecord, Short> LATEST = createField(DSL.name("latest"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>metadata_db.file_journal.path</code>.
     */
    public final TableField<FileJournalRecord, String> PATH = createField(DSL.name("path"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>metadata_db.file_journal.uploader_id</code>.
     */
    public final TableField<FileJournalRecord, UUID> UPLOADER_ID = createField(DSL.name("uploader_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>metadata_db.file_journal.state</code>.
     */
    public final TableField<FileJournalRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>metadata_db.file_journal.size</code>.
     */
    public final TableField<FileJournalRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>metadata_db.file_journal.blocklist</code>.
     */
    public final TableField<FileJournalRecord, String> BLOCKLIST = createField(DSL.name("blocklist"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>metadata_db.file_journal.history_id</code>.
     */
    public final TableField<FileJournalRecord, Integer> HISTORY_ID = createField(DSL.name("history_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>metadata_db.file_journal.updated_by</code>.
     */
    public final TableField<FileJournalRecord, UUID> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.UUID, this, "");

    /**
     * The column <code>metadata_db.file_journal.created_at</code>.
     */
    public final TableField<FileJournalRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>metadata_db.file_journal.updated_at</code>.
     */
    public final TableField<FileJournalRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private FileJournal(Name alias, Table<FileJournalRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FileJournal(Name alias, Table<FileJournalRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.file_journal</code> table reference
     */
    public FileJournal(String alias) {
        this(DSL.name(alias), FILE_JOURNAL);
    }

    /**
     * Create an aliased <code>metadata_db.file_journal</code> table reference
     */
    public FileJournal(Name alias) {
        this(alias, FILE_JOURNAL);
    }

    /**
     * Create a <code>metadata_db.file_journal</code> table reference
     */
    public FileJournal() {
        this(DSL.name("file_journal"), null);
    }

    public <O extends Record> FileJournal(Table<O> path, ForeignKey<O, FileJournalRecord> childPath, InverseForeignKey<O, FileJournalRecord> parentPath) {
        super(path, childPath, parentPath, FILE_JOURNAL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FileJournalPath extends FileJournal implements Path<FileJournalRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FileJournalPath(Table<O> path, ForeignKey<O, FileJournalRecord> childPath, InverseForeignKey<O, FileJournalRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FileJournalPath(Name alias, Table<FileJournalRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FileJournalPath as(String alias) {
            return new FileJournalPath(DSL.name(alias), this);
        }

        @Override
        public FileJournalPath as(Name alias) {
            return new FileJournalPath(alias, this);
        }

        @Override
        public FileJournalPath as(Table<?> alias) {
            return new FileJournalPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public UniqueKey<FileJournalRecord> getPrimaryKey() {
        return Keys.FILE_JOURNAL_PKEY;
    }

    @Override
    public List<ForeignKey<FileJournalRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FILE_JOURNAL__FILE_JOURNAL_UPDATED_BY, Keys.FILE_JOURNAL__FILE_JOURNAL_WS, Keys.FILE_JOURNAL__FILE_UPLOADER);
    }

    private transient UsersPath _fileJournalUpdatedBy;

    /**
     * Get the implicit join path to the <code>metadata_db.users</code> table,
     * via the <code>file_journal_updated_by</code> key.
     */
    public UsersPath fileJournalUpdatedBy() {
        if (_fileJournalUpdatedBy == null)
            _fileJournalUpdatedBy = new UsersPath(this, Keys.FILE_JOURNAL__FILE_JOURNAL_UPDATED_BY, null);

        return _fileJournalUpdatedBy;
    }

    private transient WorkspacesPath _workspaces;

    /**
     * Get the implicit join path to the <code>metadata_db.workspaces</code>
     * table.
     */
    public WorkspacesPath workspaces() {
        if (_workspaces == null)
            _workspaces = new WorkspacesPath(this, Keys.FILE_JOURNAL__FILE_JOURNAL_WS, null);

        return _workspaces;
    }

    private transient UsersPath _fileUploader;

    /**
     * Get the implicit join path to the <code>metadata_db.users</code> table,
     * via the <code>file_uploader</code> key.
     */
    public UsersPath fileUploader() {
        if (_fileUploader == null)
            _fileUploader = new UsersPath(this, Keys.FILE_JOURNAL__FILE_UPLOADER, null);

        return _fileUploader;
    }

    @Override
    public List<Check<FileJournalRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("file_journal_state_check"), "(((state)::text = ANY ((ARRAY['UPLOADED'::character varying, 'IN_UPLOAD'::character varying, 'DELETED'::character varying, 'DELETING'::character varying])::text[])))", true)
        );
    }

    @Override
    public FileJournal as(String alias) {
        return new FileJournal(DSL.name(alias), this);
    }

    @Override
    public FileJournal as(Name alias) {
        return new FileJournal(alias, this);
    }

    @Override
    public FileJournal as(Table<?> alias) {
        return new FileJournal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileJournal rename(String name) {
        return new FileJournal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileJournal rename(Name name) {
        return new FileJournal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileJournal rename(Table<?> name) {
        return new FileJournal(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileJournal where(Condition condition) {
        return new FileJournal(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileJournal where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileJournal where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileJournal where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileJournal where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileJournal where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileJournal where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileJournal where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileJournal whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileJournal whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
