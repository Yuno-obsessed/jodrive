/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.FileJournal.FileJournalPath;
import sanity.nil.meta.db.tables.UserWorkspaces.UserWorkspacesPath;
import sanity.nil.meta.db.tables.Users.UsersPath;
import sanity.nil.meta.db.tables.records.WorkspacesRecord;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Workspaces extends TableImpl<WorkspacesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metadata_db.workspaces</code>
     */
    public static final Workspaces WORKSPACES = new Workspaces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkspacesRecord> getRecordType() {
        return WorkspacesRecord.class;
    }

    /**
     * The column <code>metadata_db.workspaces.id</code>.
     */
    public final TableField<WorkspacesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>metadata_db.workspaces.name</code>.
     */
    public final TableField<WorkspacesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>metadata_db.workspaces.description</code>.
     */
    public final TableField<WorkspacesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    private Workspaces(Name alias, Table<WorkspacesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Workspaces(Name alias, Table<WorkspacesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.workspaces</code> table reference
     */
    public Workspaces(String alias) {
        this(DSL.name(alias), WORKSPACES);
    }

    /**
     * Create an aliased <code>metadata_db.workspaces</code> table reference
     */
    public Workspaces(Name alias) {
        this(alias, WORKSPACES);
    }

    /**
     * Create a <code>metadata_db.workspaces</code> table reference
     */
    public Workspaces() {
        this(DSL.name("workspaces"), null);
    }

    public <O extends Record> Workspaces(Table<O> path, ForeignKey<O, WorkspacesRecord> childPath, InverseForeignKey<O, WorkspacesRecord> parentPath) {
        super(path, childPath, parentPath, WORKSPACES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WorkspacesPath extends Workspaces implements Path<WorkspacesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> WorkspacesPath(Table<O> path, ForeignKey<O, WorkspacesRecord> childPath, InverseForeignKey<O, WorkspacesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WorkspacesPath(Name alias, Table<WorkspacesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WorkspacesPath as(String alias) {
            return new WorkspacesPath(DSL.name(alias), this);
        }

        @Override
        public WorkspacesPath as(Name alias) {
            return new WorkspacesPath(alias, this);
        }

        @Override
        public WorkspacesPath as(Table<?> alias) {
            return new WorkspacesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public Identity<WorkspacesRecord, Long> getIdentity() {
        return (Identity<WorkspacesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkspacesRecord> getPrimaryKey() {
        return Keys.WORKSPACES_PKEY;
    }

    private transient FileJournalPath _fileJournal;

    /**
     * Get the implicit to-many join path to the
     * <code>metadata_db.file_journal</code> table
     */
    public FileJournalPath fileJournal() {
        if (_fileJournal == null)
            _fileJournal = new FileJournalPath(this, null, Keys.FILE_JOURNAL__FILE_JOURNAL_WS.getInverseKey());

        return _fileJournal;
    }

    private transient UserWorkspacesPath _userWorkspaces;

    /**
     * Get the implicit to-many join path to the
     * <code>metadata_db.user_workspaces</code> table
     */
    public UserWorkspacesPath userWorkspaces() {
        if (_userWorkspaces == null)
            _userWorkspaces = new UserWorkspacesPath(this, null, Keys.USER_WORKSPACES__USER_WS_WS.getInverseKey());

        return _userWorkspaces;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>metadata_db.users</code> table
     */
    public UsersPath users() {
        return userWorkspaces().users();
    }

    @Override
    public Workspaces as(String alias) {
        return new Workspaces(DSL.name(alias), this);
    }

    @Override
    public Workspaces as(Name alias) {
        return new Workspaces(alias, this);
    }

    @Override
    public Workspaces as(Table<?> alias) {
        return new Workspaces(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Workspaces rename(String name) {
        return new Workspaces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workspaces rename(Name name) {
        return new Workspaces(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workspaces rename(Table<?> name) {
        return new Workspaces(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Workspaces where(Condition condition) {
        return new Workspaces(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Workspaces where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Workspaces where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Workspaces where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Workspaces where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Workspaces where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Workspaces where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Workspaces where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Workspaces whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Workspaces whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
