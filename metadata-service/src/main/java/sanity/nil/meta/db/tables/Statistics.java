/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.UserStatistics.UserStatisticsPath;
import sanity.nil.meta.db.tables.Users.UsersPath;
import sanity.nil.meta.db.tables.records.StatisticsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Statistics extends TableImpl<StatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metadata_db.statistics</code>
     */
    public static final Statistics STATISTICS = new Statistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatisticsRecord> getRecordType() {
        return StatisticsRecord.class;
    }

    /**
     * The column <code>metadata_db.statistics.id</code>.
     */
    public final TableField<StatisticsRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>metadata_db.statistics.quota</code>.
     */
    public final TableField<StatisticsRecord, String> QUOTA = createField(DSL.name("quota"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>metadata_db.statistics.description</code>.
     */
    public final TableField<StatisticsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    private Statistics(Name alias, Table<StatisticsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Statistics(Name alias, Table<StatisticsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.statistics</code> table reference
     */
    public Statistics(String alias) {
        this(DSL.name(alias), STATISTICS);
    }

    /**
     * Create an aliased <code>metadata_db.statistics</code> table reference
     */
    public Statistics(Name alias) {
        this(alias, STATISTICS);
    }

    /**
     * Create a <code>metadata_db.statistics</code> table reference
     */
    public Statistics() {
        this(DSL.name("statistics"), null);
    }

    public <O extends Record> Statistics(Table<O> path, ForeignKey<O, StatisticsRecord> childPath, InverseForeignKey<O, StatisticsRecord> parentPath) {
        super(path, childPath, parentPath, STATISTICS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class StatisticsPath extends Statistics implements Path<StatisticsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> StatisticsPath(Table<O> path, ForeignKey<O, StatisticsRecord> childPath, InverseForeignKey<O, StatisticsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private StatisticsPath(Name alias, Table<StatisticsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public StatisticsPath as(String alias) {
            return new StatisticsPath(DSL.name(alias), this);
        }

        @Override
        public StatisticsPath as(Name alias) {
            return new StatisticsPath(alias, this);
        }

        @Override
        public StatisticsPath as(Table<?> alias) {
            return new StatisticsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public Identity<StatisticsRecord, Short> getIdentity() {
        return (Identity<StatisticsRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<StatisticsRecord> getPrimaryKey() {
        return Keys.STATISTICS_PKEY;
    }

    private transient UserStatisticsPath _userStatistics;

    /**
     * Get the implicit to-many join path to the
     * <code>metadata_db.user_statistics</code> table
     */
    public UserStatisticsPath userStatistics() {
        if (_userStatistics == null)
            _userStatistics = new UserStatisticsPath(this, null, Keys.USER_STATISTICS__USER_STATISTICS_STATISTICS.getInverseKey());

        return _userStatistics;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>metadata_db.users</code> table
     */
    public UsersPath users() {
        return userStatistics().users();
    }

    @Override
    public List<Check<StatisticsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("statistics_quota_check"), "(((quota)::text = ANY ((ARRAY['USER_STORAGE_USED'::character varying, 'USER_WORKSPACES'::character varying])::text[])))", true)
        );
    }

    @Override
    public Statistics as(String alias) {
        return new Statistics(DSL.name(alias), this);
    }

    @Override
    public Statistics as(Name alias) {
        return new Statistics(alias, this);
    }

    @Override
    public Statistics as(Table<?> alias) {
        return new Statistics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Statistics rename(String name) {
        return new Statistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statistics rename(Name name) {
        return new Statistics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statistics rename(Table<?> name) {
        return new Statistics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statistics where(Condition condition) {
        return new Statistics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statistics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statistics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statistics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Statistics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Statistics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Statistics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Statistics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statistics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statistics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
