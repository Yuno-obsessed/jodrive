/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.records.WorkspaceSubscriptionsRecord;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WorkspaceSubscriptions extends TableImpl<WorkspaceSubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>metadata_db.workspace_subscriptions</code>
     */
    public static final WorkspaceSubscriptions WORKSPACE_SUBSCRIPTIONS = new WorkspaceSubscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkspaceSubscriptionsRecord> getRecordType() {
        return WorkspaceSubscriptionsRecord.class;
    }

    /**
     * The column <code>metadata_db.workspace_subscriptions.id</code>.
     */
    public final TableField<WorkspaceSubscriptionsRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>metadata_db.workspace_subscriptions.description</code>.
     */
    public final TableField<WorkspaceSubscriptionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>metadata_db.workspace_subscriptions.title</code>.
     */
    public final TableField<WorkspaceSubscriptionsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    private WorkspaceSubscriptions(Name alias, Table<WorkspaceSubscriptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private WorkspaceSubscriptions(Name alias, Table<WorkspaceSubscriptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.workspace_subscriptions</code> table
     * reference
     */
    public WorkspaceSubscriptions(String alias) {
        this(DSL.name(alias), WORKSPACE_SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>metadata_db.workspace_subscriptions</code> table
     * reference
     */
    public WorkspaceSubscriptions(Name alias) {
        this(alias, WORKSPACE_SUBSCRIPTIONS);
    }

    /**
     * Create a <code>metadata_db.workspace_subscriptions</code> table reference
     */
    public WorkspaceSubscriptions() {
        this(DSL.name("workspace_subscriptions"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public Identity<WorkspaceSubscriptionsRecord, Short> getIdentity() {
        return (Identity<WorkspaceSubscriptionsRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkspaceSubscriptionsRecord> getPrimaryKey() {
        return Keys.WORKSPACE_SUBSCRIPTIONS_PKEY;
    }

    @Override
    public WorkspaceSubscriptions as(String alias) {
        return new WorkspaceSubscriptions(DSL.name(alias), this);
    }

    @Override
    public WorkspaceSubscriptions as(Name alias) {
        return new WorkspaceSubscriptions(alias, this);
    }

    @Override
    public WorkspaceSubscriptions as(Table<?> alias) {
        return new WorkspaceSubscriptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkspaceSubscriptions rename(String name) {
        return new WorkspaceSubscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkspaceSubscriptions rename(Name name) {
        return new WorkspaceSubscriptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkspaceSubscriptions rename(Table<?> name) {
        return new WorkspaceSubscriptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkspaceSubscriptions where(Condition condition) {
        return new WorkspaceSubscriptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkspaceSubscriptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkspaceSubscriptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkspaceSubscriptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkspaceSubscriptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkspaceSubscriptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkspaceSubscriptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkspaceSubscriptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkspaceSubscriptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkspaceSubscriptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
