/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.records.FileIdSequenceRecord;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FileIdSequence extends TableImpl<FileIdSequenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metadata_db.file_id_sequence</code>
     */
    public static final FileIdSequence FILE_ID_SEQUENCE = new FileIdSequence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileIdSequenceRecord> getRecordType() {
        return FileIdSequenceRecord.class;
    }

    /**
     * The column <code>metadata_db.file_id_sequence.ws_id</code>.
     */
    public final TableField<FileIdSequenceRecord, Long> WS_ID = createField(DSL.name("ws_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>metadata_db.file_id_sequence.next_id</code>.
     */
    public final TableField<FileIdSequenceRecord, Long> NEXT_ID = createField(DSL.name("next_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.BIGINT)), this, "");

    private FileIdSequence(Name alias, Table<FileIdSequenceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FileIdSequence(Name alias, Table<FileIdSequenceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.file_id_sequence</code> table
     * reference
     */
    public FileIdSequence(String alias) {
        this(DSL.name(alias), FILE_ID_SEQUENCE);
    }

    /**
     * Create an aliased <code>metadata_db.file_id_sequence</code> table
     * reference
     */
    public FileIdSequence(Name alias) {
        this(alias, FILE_ID_SEQUENCE);
    }

    /**
     * Create a <code>metadata_db.file_id_sequence</code> table reference
     */
    public FileIdSequence() {
        this(DSL.name("file_id_sequence"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public UniqueKey<FileIdSequenceRecord> getPrimaryKey() {
        return Keys.FILE_ID_SEQUENCE_PKEY;
    }

    @Override
    public FileIdSequence as(String alias) {
        return new FileIdSequence(DSL.name(alias), this);
    }

    @Override
    public FileIdSequence as(Name alias) {
        return new FileIdSequence(alias, this);
    }

    @Override
    public FileIdSequence as(Table<?> alias) {
        return new FileIdSequence(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileIdSequence rename(String name) {
        return new FileIdSequence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileIdSequence rename(Name name) {
        return new FileIdSequence(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileIdSequence rename(Table<?> name) {
        return new FileIdSequence(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileIdSequence where(Condition condition) {
        return new FileIdSequence(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileIdSequence where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileIdSequence where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileIdSequence where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileIdSequence where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileIdSequence where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileIdSequence where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FileIdSequence where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileIdSequence whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FileIdSequence whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
