/*
 * This file is generated by jOOQ.
 */
package sanity.nil.meta.db.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sanity.nil.meta.db.Keys;
import sanity.nil.meta.db.MetadataDb;
import sanity.nil.meta.db.tables.FileJournal.FileJournalPath;
import sanity.nil.meta.db.tables.Links.LinksPath;
import sanity.nil.meta.db.tables.Statistics.StatisticsPath;
import sanity.nil.meta.db.tables.UserStatistics.UserStatisticsPath;
import sanity.nil.meta.db.tables.UserSubscriptions.UserSubscriptionsPath;
import sanity.nil.meta.db.tables.UserWorkspaces.UserWorkspacesPath;
import sanity.nil.meta.db.tables.Workspaces.WorkspacesPath;
import sanity.nil.meta.db.tables.records.UsersRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metadata_db.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>metadata_db.users.id</code>.
     */
    public final TableField<UsersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>metadata_db.users.email</code>.
     */
    public final TableField<UsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>metadata_db.users.username</code>.
     */
    public final TableField<UsersRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>metadata_db.users.avatar</code>.
     */
    public final TableField<UsersRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>metadata_db.users.subscription_id</code>.
     */
    public final TableField<UsersRecord, Short> SUBSCRIPTION_ID = createField(DSL.name("subscription_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>metadata_db.users.created_at</code>.
     */
    public final TableField<UsersRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>metadata_db.users.updated_at</code>.
     */
    public final TableField<UsersRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>metadata_db.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>metadata_db.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>metadata_db.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
        super(path, childPath, parentPath, USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsersPath extends Users implements Path<UsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsersPath(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsersPath(Name alias, Table<UsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsersPath as(String alias) {
            return new UsersPath(DSL.name(alias), this);
        }

        @Override
        public UsersPath as(Name alias) {
            return new UsersPath(alias, this);
        }

        @Override
        public UsersPath as(Table<?> alias) {
            return new UsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MetadataDb.METADATA_DB;
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS__USER_SUBSCRIPTION);
    }

    private transient UserSubscriptionsPath _userSubscriptions;

    /**
     * Get the implicit join path to the
     * <code>metadata_db.user_subscriptions</code> table.
     */
    public UserSubscriptionsPath userSubscriptions() {
        if (_userSubscriptions == null)
            _userSubscriptions = new UserSubscriptionsPath(this, Keys.USERS__USER_SUBSCRIPTION, null);

        return _userSubscriptions;
    }

    private transient FileJournalPath _fileJournalUpdatedBy;

    /**
     * Get the implicit to-many join path to the
     * <code>metadata_db.file_journal</code> table, via the
     * <code>file_journal_updated_by</code> key
     */
    public FileJournalPath fileJournalUpdatedBy() {
        if (_fileJournalUpdatedBy == null)
            _fileJournalUpdatedBy = new FileJournalPath(this, null, Keys.FILE_JOURNAL__FILE_JOURNAL_UPDATED_BY.getInverseKey());

        return _fileJournalUpdatedBy;
    }

    private transient FileJournalPath _fileUploader;

    /**
     * Get the implicit to-many join path to the
     * <code>metadata_db.file_journal</code> table, via the
     * <code>file_uploader</code> key
     */
    public FileJournalPath fileUploader() {
        if (_fileUploader == null)
            _fileUploader = new FileJournalPath(this, null, Keys.FILE_JOURNAL__FILE_UPLOADER.getInverseKey());

        return _fileUploader;
    }

    private transient LinksPath _links;

    /**
     * Get the implicit to-many join path to the <code>metadata_db.links</code>
     * table
     */
    public LinksPath links() {
        if (_links == null)
            _links = new LinksPath(this, null, Keys.LINKS__LINK_ISSUER.getInverseKey());

        return _links;
    }

    private transient UserStatisticsPath _userStatistics;

    /**
     * Get the implicit to-many join path to the
     * <code>metadata_db.user_statistics</code> table
     */
    public UserStatisticsPath userStatistics() {
        if (_userStatistics == null)
            _userStatistics = new UserStatisticsPath(this, null, Keys.USER_STATISTICS__USER_STATISTICS_USER.getInverseKey());

        return _userStatistics;
    }

    private transient UserWorkspacesPath _userWorkspaces;

    /**
     * Get the implicit to-many join path to the
     * <code>metadata_db.user_workspaces</code> table
     */
    public UserWorkspacesPath userWorkspaces() {
        if (_userWorkspaces == null)
            _userWorkspaces = new UserWorkspacesPath(this, null, Keys.USER_WORKSPACES__USER_WS_USER.getInverseKey());

        return _userWorkspaces;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>metadata_db.statistics</code> table
     */
    public StatisticsPath statistics() {
        return userStatistics().statistics();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>metadata_db.workspaces</code> table
     */
    public WorkspacesPath workspaces() {
        return userWorkspaces().workspaces();
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    @Override
    public Users as(Table<?> alias) {
        return new Users(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Table<?> name) {
        return new Users(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition condition) {
        return new Users(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
