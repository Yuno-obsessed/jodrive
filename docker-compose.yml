x-minio-common: &minio-common
  image: quay.io/minio/minio:latest
  command: server --address ":9000" --console-address ":9001" http://minio1/minio.data{1...2}
  ports:
    - "9000:9000"
    - "9001:9001"
  environment:
    - MINIO_ROOT_USER=Q3AM3UQ867SPQQA43P2F
    - MINIO_ROOT_PASSWORD=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
  healthcheck:
    test: [ "CMD", "mc", "ready", "local" ]
    interval: 5s
    timeout: 5s
    retries: 5

services:
  jodrive-db:
    image: postgres:16-alpine
    hostname: postgres
    restart: on-failure
    environment:
      POSTGRES_DB: jodrive
      POSTGRES_USER: sanity
      POSTGRES_PASSWORD: wordpass
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/users:rw
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - minio.data1-1:/minio.data1
      - minio.data1-2:/minio.data2

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.0
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    ports:
      - "7080:7080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7080/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    command: [ "start-dev", "--http-port", "7080"]
    depends_on:
      jodrive-db:
        condition: service_started
    volumes:
      - ./config/keycloak/keycloak.conf:/opt/keycloak/conf/keycloak.conf

  block-service:
    hostname: block-service
    container_name: block-service
    build:
      dockerfile: block-service/src/main/docker/Dockerfile.jvm
    ports:
      - "8081:8081"
    depends_on:
      jodrive-db:
        condition: service_healthy
      minio1:
        condition: service_started

  metadata-service:
    hostname: metadata-service
    container_name: metadata-service
    build:
      dockerfile: metadata-service/src/main/docker/Dockerfile.jvm
    ports:
      - "8082:8082"
    depends_on:
      jodrive-db:
        condition: service_healthy
      minio1:
        condition: service_started

  redis:
    container_name: redis
    image: redis:alpine
    command: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis.data:/data
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 10s
      timeout: 4s
      retries: 5
      start_period: 10s

  test-data-script:
    build:
      context: ./test
    container_name: test-data-script
#    depends_on:
#      metadata-service:
#        condition: service_healthy
#      block-service:
#        condition: service_healthy
#      keycloak2:
#        condition: service_healthy

#  nginx:
#    image: nginx:latest
#    container_name: nginx
#    hostname: nginx
#    restart: on-failure
#    ports:
#      - "80:80"
#    depends_on:
#      partnership:
#        condition: service_started
#    volumes:
#      - ./config/nginx/conf.prod/:/etc/nginx/conf.d/
#      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf

#  minio2:
#    <<: *minio-common
#    hostname: minio2
#    volumes:
#      - minio.data2-1:/minio.data1
#      - minio.data2-2:/minio.data2
#
#  minio3:
#    <<: *minio-common
#    hostname: minio3
#    volumes:
#      - minio.data3-1:/minio.data1
#      - minio.data3-2:/minio.data2
#
#  minio4:
#    <<: *minio-common
#    hostname: minio4
#    volumes:
#      - minio.data4-1:/minio.data1
#      - minio.data4-2:/minio.data2


volumes:
  postgres.data: { }
  minio.data1-1: { }
  minio.data1-2: { }
  redis.data: { }
#  minio.data2-1: { }
#  minio.data2-2: { }
#  minio.data3-1: { }
#  minio.data3-2: { }
#  minio.data4-1: { }
#  minio.data4-2: { }